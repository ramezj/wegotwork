// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  userWorkspaces WorkspaceUser[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workspace {
  id String @id @default(cuid())
  name String
  slug String @unique
  description String @default("")
  jobs Job[]
  users WorkspaceUser[]
  invitations WorkspaceInvite[]
}

model WorkspaceUser {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @default(member)
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}
model WorkspaceInvite {
  id String @id @default(cuid())
  role Role @default(member)
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
enum Role {
  owner
  member
}
model Job {
  id String @id @default(cuid())
  title String
  type Type @default(fulltime)
  location String?
  content String
  createdAt DateTime @default(now())
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  applicants Applicant[]
}
enum Type {
  fulltime
  parttime
  internship
  contract
}
enum Status {
  SUBMITTED
  UNDERREVIEW
  INTERVIEW
  OFFER
  REJECTED
  HIRED
}
model Applicant {
  id String @id @default(cuid())
  name String
  number BigInt
  motivation String @default("")
  email String
  linkedIn String?
  twitter String?
  github String?
  createdAt DateTime @default(now())
  status Status @default(SUBMITTED)
  resumeKey String
  jobId String
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}