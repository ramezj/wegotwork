// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?

  @@id([provider, providerAccountId])
  @@map("account")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  firstTimeUser   Boolean         @default(true)
  isPremium       Boolean         @default(false)
  subscription_id String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  userWorkspaces  WorkspaceUser[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("user")
}

model Session {
  sessionToken String   @unique @id
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  token        String
  ipAddress    String?
  userAgent    String?

  @@unique([token])
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique @default(cuid())
  jobs        Job[]
  users       WorkspaceUser[]
  invitations WorkspaceInvite[]
}

model WorkspaceUser {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role      @default(member)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model WorkspaceInvite {
  id          String    @id @default(cuid())
  email       String    @unique
  role        Role      @default(member)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

enum Role {
  owner
  member
}

model Job {
  id          String    @id @default(cuid())
  title       String
  type        Type      @default(fulltime)
  location    String?
  content     String
  createdAt   DateTime  @default(now())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum Type {
  fulltime
  parttime
  internship
  contract
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
